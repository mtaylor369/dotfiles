#!/bin/sh
#
# sf
#
# Recursively search for files matching a given regular expression pattern.
#
# Usage: sf [-a] [-d directory] pattern
#
set -eu

error_msg() {
	printf '%s: %s\n' "${0##*/}" "$*" >&2
}

usage() {
	cat >&2 <<-EOF
	usage: ${0##*/} [-a] [-d directory] pattern
	EOF
}

print_all_matches=0
dir=''

while getopts ':ad:' opt; do
	case "${opt}" in
		'a')
			print_all_matches=1
			;;
		'd')
			dir="${OPTARG}"
			;;
		':')
			error_msg "option requires an argument -- ${OPTARG}"
			usage
			exit 1
			;;
		*)
			error_msg "unknown option -- ${OPTARG}"
			usage
			exit 1
			;;
	esac
done

shift "$((OPTIND - 1))"

if [ "$#" -ne 1 ]; then
	usage
	exit 1
fi

pattern="$1"

if [ -n "${dir}" ]; then
	if [ ! -d "${dir}" ]; then
		error_msg "${dir}: no such directory exists"
		exit 1
	fi
else
	dir="$(pwd)"
fi

while IFS='' read -r file; do
	[ -f "${file}" ] || continue
	file_type="$(file "${file}" 2>/dev/null || :)"

	awk -v basename="${file##*/}" \
	    -v file="${file}" \
	    -v pattern="${pattern}" \
	    -v file_type="${file_type##*: }" \
	    -v print_all_matches="${print_all_matches}" '
	BEGIN {
		file_path_printed = 0;

		if (basename ~ pattern) {
			printf("%s\n", file);
			file_path_printed = 1;
		}

		if (file_type !~ / (text|script)( |$)/) {
			exit 0;
		}
	}

	$0 ~ pattern {
		if (file_path_printed == 0) {
			printf("%s\n", file);
			file_path_printed = 1;
		}

		printf("%6u: %s\n", NR, $0);

		if (print_all_matches == 0) {
			exit 0;
		}
	}' "${file}"
done <<-EOF
$(find "${dir}" ! -path "$(printf '*\n*')" \
    -a ! -path '*/.Xauthority' \
    -a ! -path '*/.cache' \
    -a ! -path '*/.cache/*' \
    -a ! -path '*/.dbus' \
    -a ! -path '*/.dbus/*' \
    -a ! -path '*/.git' \
    -a ! -path '*/.git/*' \
    -a ! -path '*/.mozilla' \
    -a ! -path '*/.mozilla/*' \
    -a ! -path '*/.sndio' \
    -a ! -path '*/.sndio/*' 2>/dev/null | sort -u)
EOF
